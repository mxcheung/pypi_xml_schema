import unittest

class TestValidateSchemaFields(unittest.TestCase):

    def test_valid_schema(self):
        schema = {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "enum": ["Alice", "Bob"]
                },
                "email": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$"
                }
            }
        }
        try:
            validate_schema_fields(schema)
        except ValueError:
            self.fail("validate_schema_fields() raised ValueError unexpectedly!")

    def test_invalid_schema(self):
        schema = {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        }
        with self.assertRaises(ValueError) as context:
            validate_schema_fields(schema)
        self.assertIn("Field 'name' must have either an 'enum' or a 'pattern' field.", str(context.exception))
        self.assertIn("Field 'email' must have either an 'enum' or a 'pattern' field.", str(context.exception))

if __name__ == "__main__":
    unittest.main()
